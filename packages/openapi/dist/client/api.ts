/* tslint:disable */
/* eslint-disable */
/**
 * API_ID optional-string
 * Sample API on API Gateway with a Google Cloud Functions backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {Array<Token>}
     * @memberof InlineObject
     */
    'tokens': Array<Token>;
    /**
     * Ethereum network (Rinkeby / Homestead)
     * @type {string}
     * @memberof InlineObject
     */
    'network': InlineObjectNetworkEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'recipient': string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObjectNetworkEnum {
    Rinkeby = 'rinkeby',
    Homestead = 'homestead'
}

/**
 * 
 * @export
 * @interface MetaTransaction
 */
export interface MetaTransaction {
    /**
     * 
     * @type {string}
     * @memberof MetaTransaction
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaTransaction
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaTransaction
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaTransaction
     */
    'operation'?: string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'contractAddress': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'id': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a batch transaction
         * @param {InlineObject} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchTransaction: async (body?: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch details of an OpenSea asset
         * @param {string} contractAddress Contract address for the token to lookup
         * @param {string} id Token ID to lookup
         * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsset: async (contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAddress' is not null or undefined
            assertParamExists('getAsset', 'contractAddress', contractAddress)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAsset', 'id', id)
            // verify required parameter 'network' is not null or undefined
            assertParamExists('getAsset', 'network', network)
            const localVarPath = `/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contractAddress !== undefined) {
                localVarQueryParameter['contractAddress'] = contractAddress;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a batch transaction
         * @param {InlineObject} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBatchTransaction(body?: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBatchTransaction(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch details of an OpenSea asset
         * @param {string} contractAddress Contract address for the token to lookup
         * @param {string} id Token ID to lookup
         * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsset(contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(contractAddress, id, network, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a batch transaction
         * @param {InlineObject} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchTransaction(body?: InlineObject, options?: any): AxiosPromise<MetaTransaction> {
            return localVarFp.createBatchTransaction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch details of an OpenSea asset
         * @param {string} contractAddress Contract address for the token to lookup
         * @param {string} id Token ID to lookup
         * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsset(contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options?: any): AxiosPromise<object> {
            return localVarFp.getAsset(contractAddress, id, network, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create a batch transaction
     * @param {InlineObject} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBatchTransaction(body?: InlineObject, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBatchTransaction(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch details of an OpenSea asset
     * @param {string} contractAddress Contract address for the token to lookup
     * @param {string} id Token ID to lookup
     * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAsset(contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAsset(contractAddress, id, network, options).then((request) => request(this.axios, this.basePath));
    }
}


