{"version":3,"sources":["GlobalStyle.ts","NFTForm.tsx","ManageListModal.tsx","TokenList.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","Container","styled","div","NFTForm","tokenID","tokenContractAddress","onTokenIDChanged","onTokenContractAddressChanged","size","id","label","value","onChange","e","target","input","type","pattern","min","SearchInput","theme","fonts","fontFamily","BodyHeader","colors","separator","SearchContainer","StyledItem","StyledImage","img","StyledImageName","FormContainer","TextDesc","Text","UnstyledButton","button","StyledDivider","Divider","ManageList","title","itemList","showDeleteButton","defaultIconUrl","formBody","addButtonLabel","isSubmitFormDisabled","onSubmitForm","onItemToggle","onItemDeleted","onClose","useState","search","setSearch","isFormMode","setIsFormMode","setDefaultImage","onerror","src","body","event","placeholder","color","variant","onClick","length","filter","i","name","toLowerCase","includes","description","map","alt","onError","iconUrl","strong","checked","orientation","disabled","isDeletable","footer","okText","okDisabled","handleCancel","handleOk","withoutBodyPadding","loadTokenAssets","tokens","a","seaport","OpenSeaPort","InfuraProvider","Promise","all","token","api","getAsset","tokenAddress","contractAddress","tokenId","toString","assets","TokenList","useQuery","isLoading","data","error","alert","undefined","Error","buildCellsForRow","asset","cheapestOrder","_","minBy","sellOrders","order","basePrice","toNumber","content","formatEther","imageUrl","rows","cells","SafeApp","useSafeAppsSDK","sdk","safe","isOpen","setIsOpen","setTokens","inputTokenID","setInputTokenID","inputTokenContractAddress","setInputTokenContractAddress","setIsLoading","submitTx","useCallback","openseaBulkPurchaser","OpenseaBulkPurchaser","getDefaultProvider","createSingleTokenPurchase","safeAddress","purchaseTxs","createBatchTransactionFromPurchases","batchTx","txs","send","to","BigNumber","from","console","ManageListModal","Array","entries","index","itemId","newTokens","splice","queryClient","QueryClient","ReactDOM","render","StrictMode","loader","client","App","document","getElementById"],"mappings":"+gBAiCeA,EA7BKC,4BAAH,2fAwBHC,IACAC,K,4ECnBRC,EAAYC,UAAOC,IAAV,gLAkCAC,EAxBC,SAAC,GAAiH,IAAhHC,EAA+G,EAA/GA,QAASC,EAAsG,EAAtGA,qBAAsBC,EAAgF,EAAhFA,iBAAkBC,EAA8D,EAA9DA,8BAC/D,OAAO,mCACH,eAACP,EAAD,WACI,eAAC,OAAD,CAAMQ,KAAK,KAAX,wEAA2E,uBAA3E,oEACA,uBACA,cAAC,YAAD,CACIC,GAAG,gBACHC,MAAM,yBACNC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAON,EAA8BM,EAAEC,OAAOH,QACxDI,MAAO,CAAEC,KAAM,OAAQC,QAAS,iBAEpC,uBACA,cAAC,YAAD,CACIR,GAAG,gBACHC,MAAM,WACNC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOP,EAAiBO,EAAEC,OAAOH,QAC3CI,MAAO,CAAEC,KAAM,SAAUE,IAAK,WCzBxCC,EAAclB,UAAOc,MAAV,iLAIA,qBAAGK,MAAkBC,MAAMC,cAQtCC,EAAatB,UAAOC,IAAV,8JAIa,qBAAGkB,MAAkBI,OAAOC,aAInDC,EAAkBzB,UAAOC,IAAV,uHAIO,qBAAGkB,MAAkBI,OAAOC,aAGlDE,EAAa1B,UAAOC,IAAV,kOAMa,qBAAGkB,MAAkBI,OAAOC,aAOnDG,EAAc3B,UAAO4B,IAAV,4GAOXC,EAAkB7B,UAAOC,IAAV,sEAKf6B,EAAgB9B,UAAOC,IAAV,wFAMb8B,EAAW/B,kBAAOgC,OAAPhC,CAAH,sHAORiC,EAAiBjC,UAAOkC,OAAV,+IAMD,qBAAGf,MAAkBI,OAAOC,aAGzCW,EAAgBnC,kBAAOoC,UAAPpC,CAAH,6CAiKJqC,EAxII,SAAC,GAYO,IAAD,IAXxBC,aAWwB,MAXhB,cAWgB,EAVxBC,EAUwB,EAVxBA,SACAC,EASwB,EATxBA,iBACAC,EAQwB,EARxBA,eACAC,EAOwB,EAPxBA,SAOwB,IANxBC,sBAMwB,MANP,MAMO,MALxBC,4BAKwB,SAJxBC,EAIwB,EAJxBA,aACAC,EAGwB,EAHxBA,aACAC,EAEwB,EAFxBA,cACAC,EACwB,EADxBA,QACwB,EACIC,mBAAS,IADb,mBACjBC,EADiB,KACTC,EADS,OAEYF,oBAAS,GAFrB,mBAEjBG,EAFiB,KAELC,EAFK,KAIlBC,EAAkB,SAAC1C,GACtBA,EAAEC,OAA4B0C,QAAU,KACxC3C,EAAEC,OAA4B2C,IAAMf,GA2GvC,OACE,cAAC,eAAD,CACEO,QAASA,EACTV,MAAOA,EACPmB,KA/FKL,EACL,cAACtB,EAAD,UAAgBY,IAEhB,qCACE,eAACpB,EAAD,WACE,eAACG,EAAD,WACE,cAAC,OAAD,CAAMlB,KAAK,KAAKQ,KAAK,WACrB,cAACG,EAAD,CACEP,SAAU,SAAC+C,GAAD,OAAWP,EAAUO,EAAM7C,OAAOH,QAC5CiD,YAAY,SACZjD,MAAOwC,OAGX,cAAC,SAAD,CACE3C,KAAK,KACLqD,MAAM,UACNC,QAAQ,YACRC,QAAS,kBAAMT,GAAeD,IAJhC,SAKE,eAAC,OAAD,CAAM7C,KAAK,KAAKqD,MAAM,QAAtB,eACKjB,UAIT,+BAnCCO,GAAWA,EAAOa,OAIhBxB,EAASyB,QACd,SAACC,GAAD,aACEA,EAAEC,KAAKC,cAAcC,SAASlB,EAAOiB,iBAArC,UACAF,EAAEI,mBADF,aACA,EAAeF,cAAcC,SAASlB,EAAOiB,mBANxC5B,GAmCoB+B,KAAI,SAACL,GAI1B,OACE,eAACvC,EAAD,WAEE,eAACG,EAAD,WACE,cAACF,EAAD,CACE4C,IAAKN,EAAEC,KACPM,QAASlB,EACTE,IAAKS,EAAEQ,UAET,gCACE,8BACE,cAAC,OAAD,CAAMlE,KAAK,KAAKmE,QAAM,EAAtB,SACGT,EAAEC,SAGP,8BACE,cAACnC,EAAD,CAAUxB,KAAK,KAAf,SACG0D,EAAEI,aAAeJ,EAAEI,sBAO5B,cAAC,SAAD,CAAQM,QAASV,EAAEU,QAAShE,SA3Bf,SAACgE,GAAD,OAAsB7B,EAAamB,EAAEzD,GAAImE,MA8BrDnC,GACC,qCACE,cAACL,EAAD,CAAeyC,YAAY,aAC3B,cAAC3C,EAAD,CACE6B,QAjCY,yBAAMf,QAAN,IAAMA,OAAN,EAAMA,EAAgBkB,EAAEzD,KAkCpCqE,UAAWZ,EAAEa,YAFf,SAGE,cAAC,OAAD,CACEvE,KAAK,KACLqD,MAAOK,EAAEa,YAAc,QAAU,OACjC/D,KAAK,kBAnCEkD,EAAEzD,YAmE3BuE,OAlBM3B,EACN,cAAC,0BAAD,CACE4B,OAAO,OACPC,WAAYrC,EACZsC,aAAc,kBAAM7B,GAAc,IAClC8B,SAAU,WACR9B,GAAc,GACdR,OAPe,KAmBnBuC,oBAAkB,K,8CChOlBC,GAAe,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACdC,EAAU,IAAIC,cAAY,IAAIC,KADhB,SAECC,QAAQC,IAAIN,EAAOhB,KAAI,SAACuB,GACzC,OAAOL,EAAQM,IAAIC,SAAS,CAACC,aAAcH,EAAMI,gBAAiBC,QAASL,EAAMrF,GAAG2F,iBAHpE,cAEdC,EAFc,yBAKbA,GALa,2CAAH,sDAgDNC,GAxCG,SAAC,GAAyC,IAAxCf,EAAuC,EAAvCA,OAAuC,EACpBgB,mBAAS,CAAC,kBAAmBhB,IAAS,kBAAMD,GAAgBC,MAAvFiB,EAD+C,EAC/CA,UAAWC,EADoC,EACpCA,KAAMC,EAD8B,EAC9BA,MACzB,GAAIF,EACA,OAAO,cAAC,SAAD,CAAQhG,KAAK,OAExB,GAAIkG,EAEA,OADAC,MAAMD,GACC,6BAEX,QAAaE,IAATH,EACA,MAAM,IAAII,MAAM,qBAGpB,IASMC,EAAmB,SAACC,GAAoC,IAAD,EACnDC,EAAgBC,KAAEC,MAAMH,EAAMI,YAAY,SAACC,GAAD,OAC5CA,EAAMC,UAAUC,cAEpB,MAAO,CAAC,CACJC,QAAS,cAAC,OAAD,CAAM/G,KAAK,KAAX,SAAiBuG,EAAM5C,QACjC,CACCoD,QAAS,eAAC,OAAD,CAAM/G,KAAK,KAAX,0BAAyBgH,YAAW,iBAACR,QAAD,IAACA,OAAD,EAACA,EAAeK,UAAUjB,kBAA1B,QAAwC,MAAMA,eAC7F,CACEmB,QAAS,qBAAK9D,IAAKsD,EAAMU,SAAUjD,IAAKuC,EAAMU,cAItD,OAAO,mCACH,cAAC,QAAD,CAAOC,KAtBAjB,EAAKlC,KAAI,SAACwC,GAAqB,IAAD,EACjC,MAAO,CACHtG,GAAE,UAAEsG,EAAMZ,eAAR,QAAmB,GACrBwB,MAAOb,EAAiBC,YCjClC/G,GAAYC,UAAOC,IAAV,gLAqHA0H,GAzGC,WAA2B,IAAD,EAClBC,2BAAdC,EADgC,EAChCA,IAAKC,EAD2B,EAC3BA,KAD2B,EAEZ7E,oBAAS,GAFG,mBAEjC8E,EAFiC,KAEzBC,EAFyB,OAGZ/E,mBAA6B,IAHjB,mBAGjCqC,EAHiC,KAGzB2C,EAHyB,OAIAhF,mBAAS,IAJT,mBAIjCiF,EAJiC,KAInBC,EAJmB,OAK0BlF,mBAAS,IALnC,mBAKjCmF,EALiC,KAKNC,EALM,OAMNpF,oBAAS,GANH,mBAMjCsD,EANiC,KAMtB+B,EANsB,KAmClCC,EAAWC,sBAAW,sBAAC,gCAAAjD,EAAA,sEAEzB+C,GAAa,GACPG,EAAuB,IAAIC,IAAqBC,gCAH7B,SAIChD,QAAQC,IAAIN,EAAOhB,KAAI,SAAAuB,GAC/C,OAAO4C,EAAqBG,0BAA0B/C,EAAMrF,GAAIqF,EAAMI,gBAAiB6B,EAAKe,iBALrE,cAInBC,EAJmB,gBAQHL,EAAqBM,oCAAoCD,EAAahB,EAAKe,aARxE,cAQnBG,EARmB,OASzBV,GAAa,GATY,UAUnBT,EAAIoB,IAAIC,KAAK,CACjBD,IAAK,CAAC,CACJE,GAAIH,EAAQG,GACZzI,MAAO0I,IAAUC,KAAKL,EAAQtI,OAAOyF,WACrCK,KAAMwC,EAAQxC,SAdO,0DAmBzB8C,QAAQ7C,MAAR,MAnByB,0DAqB1B,CAACnB,EAAQwC,EAAMD,IAElB,OACE,eAAC,GAAD,WACGtB,GACC,cAAC,SAAD,CAAQhG,KAAM,OAGhB,cAAC,QAAD,CAAOA,KAAK,KAAZ,wCAEC+E,EAAOvB,OAAS,GACf,cAAC,OAAD,UACE,cAAC,GAAD,CAAWuB,OAAQA,MAIvB,cAAC,SAAD,CAAQ/E,KAAK,KAAKqD,MAAM,UAAUE,QAAS,kBAAMkE,GAAWD,IAA5D,4BAGCA,GACC,cAACwB,EAAD,CACEjH,MAAO,YACPG,eAAgB,qDAChBF,SAxDCiH,MAAMH,KAAK/D,EAAOmE,WAAWnF,KAAI,YAAqB,IAAD,mBAAlBoF,EAAkB,KAAX7D,EAAW,KAC1D,MAAO,CACDrF,GAAIkJ,EACJjF,QAAS,UACTP,KAAK,GAAD,OAAK2B,EAAMrF,IACf6D,YAAY,YAAD,OAAcwB,EAAMI,iBAC/BtB,SAAS,EACTG,aAAa,MAkDftC,kBAAgB,EAChBG,eAAe,qBACfD,SAAU,cAAC,EAAD,CACRvC,QAAS+H,EACT9H,qBAAsBgI,EACtB/H,iBAAkB8H,EAClB7H,8BAA+B+H,IAEjCxF,aAhFmB,WACzBoF,EAAU,GAAD,mBAAK3C,GAAL,CAAa,CAAC9E,GAAI4I,IAAUC,KAAKnB,GAAejC,gBAAiBmC,OAgFpEpF,QAAS,kBAAMgF,GAAU,IACzBlF,aAAc,aACdC,cA/Ec,SAAC4G,GACrB,GAAuB,kBAAZA,EACT,MAAM,IAAI/C,MAAJ,iBAAoB+C,EAApB,sBAER,IAAMC,EAAS,YAAOtE,GACtBsE,EAAUC,OAAOF,EAAQ,GACzB1B,EAAU2B,MA6ER,cAAC,UAAD,IAEA,cAAC,SAAD,CAAQrJ,KAAK,KAAKqD,MAAM,UAAUE,QAASyE,EAA3C,gDC3GAuB,GAAc,IAAIC,cAExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,gBAAD,CAAe/I,MAAOA,QAAtB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,CACEgJ,OACE,qCACE,cAAC,QAAD,CAAO5J,KAAK,KAAZ,iCACA,cAAC,SAAD,CAAQA,KAAK,UAJnB,SAQE,cAAC,sBAAD,CAAqB6J,OAAQN,GAA7B,SACE,cAACO,GAAD,aAKRC,SAASC,eAAe,W","file":"static/js/main.c1ab48f4.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%\n    }\n\n    body {\n       height: 100%;\n       margin: 0px;\n       padding: 0px;\n    }\n\n    #root {\n        height: 100%;\n        padding-right: 0.5rem;\n    }\n\n    .MuiFormControl-root,\n    .MuiInputBase-root {\n        width: 100% !important;\n    }\n\n    @font-face {\n        font-family: 'Averta';\n        src: local('Averta'), local('Averta Bold'),\n        url(${avertaFont}) format('woff2'),\n        url(${avertaBoldFont}) format('woff');\n    }\n`\n\nexport default GlobalStyle\n","import { Text, TextField } from \"@gnosis.pm/safe-react-components\";\nimport styled from 'styled-components'\n\ntype Props = {\n    tokenID: string,\n    tokenContractAddress: string,\n    onTokenIDChanged: (tokenID: string) => void,\n    onTokenContractAddressChanged: (tokenContractAddress: string) => void,\n};\n\nconst Container = styled.div`\n  padding: 1rem;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\n\nconst NFTForm = ({tokenID, tokenContractAddress, onTokenIDChanged, onTokenContractAddressChanged}: Props): React.ReactElement => {\n    return <>\n        <Container>\n            <Text size=\"lg\">Enter token ID (a number) and the token's contract address <br/>Ex: '0x059edd72cd353df5106d2b9cc5ab83a52287ac3a' for Artblocks</Text>\n            <br />\n            <TextField\n                id=\"standard-name\"\n                label=\"Token Contract Address\"\n                value={tokenContractAddress}\n                onChange={(e) => onTokenContractAddressChanged(e.target.value)}\n                input={{ type: 'text', pattern: \"[A-Za-z]{3}\" }}\n            />\n            <br />\n            <TextField\n                id=\"standard-name\"\n                label=\"Token ID\"\n                value={tokenID}\n                onChange={(e) => onTokenIDChanged(e.target.value)}\n                input={{ type: 'number', min: 0  }}\n            />\n        </Container>\n    </>\n}\n\nexport default NFTForm;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Divider } from '@gnosis.pm/safe-react-components';\n\nimport {\n  GenericModal,\n  Icon,\n  Text,\n  Button,\n  Switch,\n  ModalFooterConfirmation,\n} from '@gnosis.pm/safe-react-components';\n\nconst SearchInput = styled.input`\n  border: none;\n  background-color: transparent;\n  box-shadow: none;\n  font-family: ${({ theme }) => theme.fonts.fontFamily};\n  width: 250px;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nconst BodyHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  padding: 0 24px;\n`;\n\nconst SearchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  height: 52px;\n  border-right: 2px solid ${({ theme }) => theme.colors.separator};\n`;\n\nconst StyledItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0px 24px;\n  height: 51px;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n\n  :last-child {\n    border-bottom: 0px;\n  }\n`;\n\nconst StyledImage = styled.img`\n  width: 26px;\n  height: 26px;\n  object-fit: contain;\n  margin: 0 16px 0 0;\n`;\n\nconst StyledImageName = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 24px;\n`;\n\nconst TextDesc = styled(Text)`\n  width: 350px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst UnstyledButton = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  outline-color: ${({ theme }) => theme.colors.separator};\n`;\n\nconst StyledDivider = styled(Divider)`\n  height: 30px;\n`;\n\ntype Props = {\n  title?: string;\n  defaultIconUrl: string;\n  showDeleteButton?: boolean;\n  itemList: Array<{\n    id: number | string;\n    iconUrl: string;\n    name: string;\n    description?: string;\n    checked: boolean;\n    isDeletable?: boolean;\n  }>;\n  addButtonLabel?: string;\n  formBody: React.ReactNode;\n  isSubmitFormDisabled?: boolean;\n  onSubmitForm: () => void;\n  onItemToggle: (itemId: number | string, checked: boolean) => void;\n  onItemDeleted?: (itemId: number | string) => void;\n  onClose: () => void;\n};\n\nconst ManageList = ({\n  title = 'Manage List',\n  itemList,\n  showDeleteButton,\n  defaultIconUrl,\n  formBody,\n  addButtonLabel = 'add',\n  isSubmitFormDisabled = false,\n  onSubmitForm,\n  onItemToggle,\n  onItemDeleted,\n  onClose,\n}: Props): JSX.Element => {\n  const [search, setSearch] = useState('');\n  const [isFormMode, setIsFormMode] = useState(false);\n\n  const setDefaultImage = (e: React.SyntheticEvent<HTMLImageElement>): void => {\n    (e.target as HTMLImageElement).onerror = null;\n    (e.target as HTMLImageElement).src = defaultIconUrl;\n  };\n\n  const getFilteredItemList = () => {\n    if (!search || !search.length) {\n      return itemList;\n    }\n\n    return itemList.filter(\n      (i) =>\n        i.name.toLowerCase().includes(search.toLowerCase()) ||\n        i.description?.toLowerCase().includes(search.toLowerCase())\n    );\n  };\n\n  const getBody = () => {\n    return isFormMode ? (\n      <FormContainer>{formBody}</FormContainer>\n    ) : (\n      <>\n        <BodyHeader>\n          <SearchContainer>\n            <Icon size=\"md\" type=\"search\" />\n            <SearchInput\n              onChange={(event) => setSearch(event.target.value)}\n              placeholder=\"Search\"\n              value={search}\n            />\n          </SearchContainer>\n          <Button\n            size=\"md\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={() => setIsFormMode(!isFormMode)}>\n            <Text size=\"lg\" color=\"white\">\n              + {addButtonLabel}\n            </Text>\n          </Button>\n        </BodyHeader>\n        <div>\n          {getFilteredItemList().map((i) => {\n            const onChange = (checked: boolean) => onItemToggle(i.id, checked);\n            const onDeleteClick = () => onItemDeleted?.(i.id);\n\n            return (\n              <StyledItem key={i.id}>\n                {/* Item description */}\n                <StyledImageName>\n                  <StyledImage\n                    alt={i.name}\n                    onError={setDefaultImage}\n                    src={i.iconUrl}\n                  />\n                  <div>\n                    <div>\n                      <Text size=\"lg\" strong>\n                        {i.name}\n                      </Text>\n                    </div>\n                    <div>\n                      <TextDesc size=\"md\">\n                        {i.description && i.description}\n                      </TextDesc>\n                    </div>\n                  </div>\n                </StyledImageName>\n\n                {/* Switch */}\n                <Switch checked={i.checked} onChange={onChange} />\n\n                {/* Delete button */}\n                {showDeleteButton && (\n                  <>\n                    <StyledDivider orientation=\"vertical\" />\n                    <UnstyledButton\n                      onClick={onDeleteClick}\n                      disabled={!i.isDeletable}>\n                      <Icon\n                        size=\"md\"\n                        color={i.isDeletable ? 'error' : 'icon'}\n                        type=\"delete\"\n                      />\n                    </UnstyledButton>\n                  </>\n                )}\n              </StyledItem>\n            );\n          })}\n        </div>\n      </>\n    );\n  };\n\n  const getFooter = () => {\n    return !isFormMode ? null : (\n      <ModalFooterConfirmation\n        okText=\"Save\"\n        okDisabled={isSubmitFormDisabled}\n        handleCancel={() => setIsFormMode(false)}\n        handleOk={() => {\n          setIsFormMode(false);\n          onSubmitForm();\n        }}\n      />\n    );\n  };\n\n  return (\n    <GenericModal\n      onClose={onClose}\n      title={title}\n      body={getBody()}\n      footer={getFooter()}\n      withoutBodyPadding\n    />\n  );\n};\n\nexport default ManageList;\n","import { Loader, Table, TableAlignment, TableRow, Text } from \"@gnosis.pm/safe-react-components\"\nimport { TokenDescription } from \"./types\"\nimport { OpenSeaPort } from \"opensea-js\";\nimport { OpenSeaAsset } from \"opensea-js/lib/types\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { InfuraProvider } from \"@ethersproject/providers\";\nimport { useQuery } from 'react-query';\nimport _ from \"lodash\";\n\ntype Props = {\n    tokens: Array<TokenDescription>\n}\n\ntype RowCell = {\n    id?: string;\n    alignment?: TableAlignment;\n    content: React.ReactNode;\n};\n\nconst loadTokenAssets = async (tokens: TokenDescription[]) => {\n    const seaport = new OpenSeaPort(new InfuraProvider());\n    const assets = await Promise.all(tokens.map((token: TokenDescription) => {\n        return seaport.api.getAsset({tokenAddress: token.contractAddress, tokenId: token.id.toString()})\n    }));\n    return assets;\n}\n\nconst TokenList = ({tokens}: Props): React.ReactElement => {\n    const { isLoading, data, error } = useQuery(['loadTokenAssets', tokens], () => loadTokenAssets(tokens))\n    if (isLoading) {\n        return <Loader size=\"lg\" />\n    }\n    if (error) {\n        alert(error);\n        return <></>;\n    }\n    if (data === undefined) {\n        throw new Error(\"data is undefined\")\n    }\n\n    const buildTableRows = (): TableRow[] => {\n        return data.map((asset): TableRow => {\n            return {\n                id: asset.tokenId ?? \"\",\n                cells: buildCellsForRow(asset),\n            }\n        })\n    }\n\n    const buildCellsForRow = (asset: OpenSeaAsset): RowCell[] => {\n        const cheapestOrder = _.minBy(asset.sellOrders, (order) =>\n            order.basePrice.toNumber()\n        );\n        return [{\n            content: <Text size=\"lg\">{asset.name}</Text>\n        }, {\n            content: <Text size=\"lg\">Price: Ξ{formatEther(cheapestOrder?.basePrice.toString() ?? \"-1\").toString()}</Text>\n        },{\n            content: <img src={asset.imageUrl} alt={asset.imageUrl} />\n        }];\n    }\n\n    return <>\n        <Table rows={buildTableRows()} />\n    </>\n}\n\nexport default TokenList","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, Divider, Loader, Title } from '@gnosis.pm/safe-react-components'\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk'\nimport OpenseaBulkPurchaser from '@gsgalloway/opensea-bulk-purchaser';\nimport { BigNumber, getDefaultProvider } from 'ethers';\nimport NFTForm from './NFTForm';\nimport ManageListModal from './ManageListModal';\nimport TokenList from './TokenList';\nimport { TokenDescription } from './types';\n\nconst Container = styled.div`\n  padding: 1rem;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\n\n\n\nconst SafeApp = (): React.ReactElement => {\n  const { sdk, safe } = useSafeAppsSDK()\n  const [isOpen, setIsOpen] = useState(false);\n  const [tokens, setTokens] = useState<TokenDescription[]>([])\n  const [inputTokenID, setInputTokenID] = useState('');\n  const [inputTokenContractAddress, setInputTokenContractAddress] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onNFTFormSubmitted = () => {\n    setTokens([...tokens, {id: BigNumber.from(inputTokenID), contractAddress: inputTokenContractAddress}])\n  }\n\n  const onItemDeleted = (itemId: number | string): void => {\n    if (typeof(itemId) === 'string') {\n      throw new Error(`itemID ${itemId} should be number`)\n    }\n    const newTokens = [...tokens];\n    newTokens.splice(itemId, 1)\n    setTokens(newTokens);\n  }\n\n\n  const getListItems = () => {\n    return Array.from(tokens.entries()).map(([index, token]) => {\n      return {\n            id: index,\n            iconUrl: 'someUrl',\n            name: `${token.id}`,\n            description: `Token at ${token.contractAddress}`,\n            checked: true,\n            isDeletable: true,\n      };\n    })\n  }\n\n  const submitTx = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const openseaBulkPurchaser = new OpenseaBulkPurchaser(getDefaultProvider());\n      const purchaseTxs = await Promise.all(tokens.map(token => {\n        return openseaBulkPurchaser.createSingleTokenPurchase(token.id, token.contractAddress, safe.safeAddress)\n      }));\n\n      const batchTx = await openseaBulkPurchaser.createBatchTransactionFromPurchases(purchaseTxs, safe.safeAddress);\n      setIsLoading(false);\n      await sdk.txs.send({\n        txs: [{\n          to: batchTx.to,\n          value: BigNumber.from(batchTx.value).toString(),\n          data: batchTx.data,\n        }]\n      })\n    }\n    catch (e) {\n      console.error(e);\n    }\n  }, [tokens, safe, sdk])\n\n  return (\n    <Container>\n      {isLoading && (\n        <Loader size={\"lg\"} />\n      )}\n\n      <Title size=\"md\">New Batch OpenSea Purchase</Title>\n\n      {tokens.length > 0 && (\n        <Card>\n          <TokenList tokens={tokens}/>\n        </Card>\n      )}\n\n      <Button size=\"lg\" color=\"primary\" onClick={() => setIsOpen(!isOpen)}>\n        1. Select NFTs\n      </Button>\n      {isOpen && (\n        <ManageListModal\n          title={\"Add Token\"}\n          defaultIconUrl={\"https://opensea.io/static/images/logos/opensea.svg\"}\n          itemList={getListItems()}\n          showDeleteButton\n          addButtonLabel=\"Add token to batch\"\n          formBody={<NFTForm\n            tokenID={inputTokenID}\n            tokenContractAddress={inputTokenContractAddress}\n            onTokenIDChanged={setInputTokenID}\n            onTokenContractAddressChanged={setInputTokenContractAddress}\n          />}\n          onSubmitForm={onNFTFormSubmitted}\n          onClose={() => setIsOpen(false)}\n          onItemToggle={() => undefined}\n          onItemDeleted={onItemDeleted}\n        />\n      )}\n\n      <Divider />\n\n      <Button size=\"lg\" color=\"primary\" onClick={submitTx}>\n        2. Construct Batch Transaction\n      </Button>\n\n    </Container>\n  )\n}\n\nexport default SafeApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport { theme, Loader, Title } from '@gnosis.pm/safe-react-components'\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk'\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from 'react-query';\n\nimport GlobalStyle from './GlobalStyle'\nimport App from './App'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <SafeProvider\n        loader={\n          <>\n            <Title size=\"md\">Waiting for Safe...</Title>\n            <Loader size=\"md\" />\n          </>\n        }\n      >\n        <QueryClientProvider client={queryClient}>\n          <App />\n        </QueryClientProvider>\n      </SafeProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}