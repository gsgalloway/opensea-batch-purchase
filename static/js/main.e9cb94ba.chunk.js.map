{"version":3,"sources":["GlobalStyle.ts","utils.ts","api/api.ts","api/base.ts","api/common.ts","api/configuration.ts","steps/Step1.tsx","steps/Step4.tsx","steps/Step5.tsx","steps/Step2.tsx","TokenList.tsx","steps/opensea_details.png","ManageListModal.tsx","NFTForm.tsx","steps/Step3.tsx","gnosis-abi.ts","steps/Step6.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","capitalizeFirstLetter","string","charAt","toUpperCase","slice","isForSale","asset","undefined","sellOrders","length","unreachable","value","message","Error","InlineObjectNetworkEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","DefaultApiFp","localVarAxiosParamCreator","createBatchTransaction","body","a","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","headersFromBaseOptions","data","getAsset","contractAddress","id","network","DefaultApiAxiosParamCreator","localVarAxiosArgs","DefaultApi","then","Configuration","param","apiKey","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","Step1","supportedNetworks","toNextTab","className","size","href","map","onClick","StepFour","address","onChangeAddress","label","StepFive","onSubmitTransaction","Step2","networkConnectionInfo","connect","disconnect","networkIsSupported","find","chainId","disabled","TokenList","tokenDescriptions","tokenListings","buildCellsForRow","token","listing","priceText","isLoading","isError","error","content","console","color","formatEther","BigNumber","from","basePrice","strong","openseaLink","target","rel","src","imageUrl","alt","sum","reduce","prev","next","add","sumPurchasePrices","rows","tokenListing","idx","cells","SearchInput","styled","input","theme","fonts","fontFamily","BodyHeader","div","colors","separator","SearchContainer","StyledItem","StyledImage","img","StyledImageName","FormContainer","TextDesc","Text","UnstyledButton","button","StyledDivider","Divider","ManageList","title","itemList","showDeleteButton","defaultIconUrl","formBody","addButtonLabel","isSubmitFormDisabled","onSubmitForm","onItemToggle","onItemDeleted","onClose","useState","setSearch","isFormMode","setIsFormMode","setDefaultImage","e","onerror","type","onChange","event","placeholder","variant","filter","i","includes","description","onError","iconUrl","checked","orientation","isDeletable","footer","okText","okDisabled","handleCancel","handleOk","withoutBodyPadding","Container","NFTForm","tokenID","tokenContractAddress","onTokenIDChanged","onTokenContractAddressChanged","pattern","min","Step3","isManageListModalOpen","setIsManageListModalOpen","tokens","inputTokenID","setInputTokenID","inputTokenContractAddress","setInputTokenContractAddress","tokenListError","buttonDisabled","isSuccess","cur","iconSize","textSize","iconType","text","openseaDetailsImage","style","width","ManageListModal","entries","index","gnosisSafeABI","inputs","stateMutability","anonymous","indexed","internalType","outputs","errorBody","Step6","safeTransaction","signer","signerAddress","provider","safeAddress","proposeTransaction","safeContract","Contract","typedSafeTx","nonce","toNumber","operation","safeTxHash","calculateSafeTransactionHash","signHash","signature","safeServiceURL","safeService","SafeServiceClient","ethSafeTx","EthSafeTransaction","baseGas","gasPrice","gasToken","refundReceiver","safeTxGas","to","addSignature","EthSignSignature","getAddress","senderAddress","alert","showAvatar","web3Modal","Web3Modal","cacheProvider","loadTokenAsset","api","validateStatus","status","resp","sort","order1","order2","bn1","bn2","lt","gt","process","SafeApp","selectedTabIndex","setSelectedTabIndex","setTokens","setNetworkConnectionInfo","setSafeAddress","useQueries","queryKey","queryFn","refetchOnWindowFocus","staleTime","Infinity","submitTransactionQueryFn","networkName","Homestead","Rinkeby","serializedTokens","gnosisSafeAddress","recipient","response","useQuery","enabled","isSafeTransactionLoading","isSafeTransactionError","isSafeTransactionSuccess","safeTransactionError","submitTransaction","refetch","useCallback","web3Provider","Web3Provider","listAccounts","accounts","getSigner","getNetwork","clearCachedProvider","useEffect","cachedProvider","on","handleAccountsChanged","handleChainChanged","_hexChainId","window","location","reload","handleDisconnect","removeListener","onNFTFormSubmitted","itemId","newTokens","splice","validateTokenList","shouldShowStepFour","shouldShowStepFive","shouldShowStepSix","items","selectedTab","Step4","Step5","tabContent","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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EmD,OAAQ,CACN,CACEI,aAAc,UACd9N,KAAM,KACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,QACNuK,KAAM,WAER,CACEuD,aAAc,QACd9N,KAAM,OACNuK,KAAM,SAER,CACEuD,aAAc,sBACd9N,KAAM,YACNuK,KAAM,SAER,CACEuD,aAAc,UACd9N,KAAM,YACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,UACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,WACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,WACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,iBACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,SACNuK,KAAM,YAGVvK,KAAM,wBACN+N,QAAS,CACP,CACED,aAAc,QACd9N,KAAM,GACNuK,KAAM,UAGVoD,gBAAiB,OACjBpD,KAAM,YAER,CACEmD,OAAQ,CACN,CACEI,aAAc,UACd9N,KAAM,KACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,QACNuK,KAAM,WAER,CACEuD,aAAc,QACd9N,KAAM,OACNuK,KAAM,SAER,CACEuD,aAAc,sBACd9N,KAAM,YACNuK,KAAM,SAER,CACEuD,aAAc,UACd9N,KAAM,YACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,UACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,WACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,WACNuK,KAAM,WAER,CACEuD,aAAc,kBACd9N,KAAM,iBACNuK,KAAM,WAER,CACEuD,aAAc,QACd9N,KAAM,aACNuK,KAAM,UAGVvK,KAAM,kBACN+N,QAAS,CACP,CACED,aAAc,OACd9N,KAAM,UACNuK,KAAM,SAGVoD,gBAAiB,UACjBpD,KAAM,YAER,CACEmD,OAAQ,CACN,CACEI,aAAc,UACd9N,KAAM,KACNuK,KAAM,WAER,CACEuD,aAAc,UACd9N,KAAM,QACNuK,KAAM,WAER,CACEuD,aAAc,QACd9N,KAAM,OACNuK,KAAM,SAER,CACEuD,aAAc,sBACd9N,KAA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","file":"static/js/main.e9cb94ba.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%\n    }\n\n    body {\n       height: 100%;\n       margin: 0px;\n       padding: 0px;\n    }\n\n    #root {\n        height: 100%;\n        padding-right: 0.5rem;\n    }\n\n    .MuiFormControl-root,\n    .MuiInputBase-root {\n        width: 100% !important;\n    }\n\n    @font-face {\n        font-family: 'Averta';\n        src: local('Averta'), local('Averta Bold'),\n        url(${avertaFont}) format('woff2'),\n        url(${avertaBoldFont}) format('woff');\n    }\n\n    .NetworkName {\n        background: #E8673C;\n        color: white;\n        padding: 3px;\n        margin: 3px;\n        border-radius: 5px;\n    }\n`\n\nexport default GlobalStyle\n","import { Signer } from \"ethers\";\nimport { Web3Provider, Network } from '@ethersproject/providers';\nimport { OpenSeaAsset, Order } from \"opensea-js/lib/types\";\n\nexport type ForSaleAsset = OpenSeaAsset & {\n    sellOrders: Order[]\n}\n\nexport type NetworkConnectionInfo = {\n    provider: any,\n    web3Provider: Web3Provider,\n    signer: Signer,\n    address: string,\n    network: Network\n}\n\nexport function capitalizeFirstLetter(string: string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function isForSale(asset: OpenSeaAsset): asset is ForSaleAsset {\n    return asset.sellOrders !== undefined && \n        asset.sellOrders !== null &&\n        asset.sellOrders.length > 0;\n}\n\nexport function unreachable(value: never, message: string): Error {\n    throw new Error(message)\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * API_ID optional-string\n * Sample API on API Gateway with a Google Cloud Functions backend\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n import { Configuration } from './configuration';\n import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n // Some imports not used depending on template conditions\n // @ts-ignore\n import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n // @ts-ignore\n import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n \n /**\n  * \n  * @export\n  * @interface InlineObject\n  */\n export interface InlineObject {\n     /**\n      * \n      * @type {Array<Token>}\n      * @memberof InlineObject\n      */\n     'tokens': Array<Token>;\n     /**\n      * Ethereum network (Rinkeby / Homestead)\n      * @type {string}\n      * @memberof InlineObject\n      */\n     'network': InlineObjectNetworkEnum;\n     /**\n      * \n      * @type {string}\n      * @memberof InlineObject\n      */\n     'recipient': string;\n     /**\n      * \n      * @type {string}\n      * @memberof InlineObject\n      */\n     'gnosisSafeAddress': string;\n }\n \n /**\n     * @export\n     * @enum {string}\n     */\n export enum InlineObjectNetworkEnum {\n     Rinkeby = 'rinkeby',\n     Homestead = 'homestead'\n }\n \n /**\n  * \n  * @export\n  * @interface SafeTransaction\n  */\n export interface SafeTransaction {\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'to': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'value': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'data': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'operation': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'safeTxGas': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'baseGas': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'gasPrice': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'gasToken': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'refundReceiver': string;\n     /**\n      * \n      * @type {string}\n      * @memberof SafeTransaction\n      */\n     'nonce': string;\n }\n /**\n  * \n  * @export\n  * @interface Token\n  */\n export interface Token {\n     /**\n      * \n      * @type {string}\n      * @memberof Token\n      */\n     'contractAddress': string;\n     /**\n      * \n      * @type {string}\n      * @memberof Token\n      */\n     'id': string;\n }\n \n /**\n  * DefaultApi - axios parameter creator\n  * @export\n  */\n export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n     return {\n         /**\n          * \n          * @summary Create a batch transaction\n          * @param {InlineObject} [body] \n          * @param {*} [options] Override http request option.\n          * @throws {RequiredError}\n          */\n         createBatchTransaction: async (body?: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n             const localVarPath = `/batch-transaction`;\n             // use dummy base URL string because the URL constructor only accepts absolute URLs.\n             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n             let baseOptions;\n             if (configuration) {\n                 baseOptions = configuration.baseOptions;\n             }\n \n             const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n             const localVarHeaderParameter = {} as any;\n             const localVarQueryParameter = {} as any;\n \n \n     \n             localVarHeaderParameter['Content-Type'] = 'application/json';\n \n             setSearchParams(localVarUrlObj, localVarQueryParameter);\n             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n             localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n \n             return {\n                 url: toPathString(localVarUrlObj),\n                 options: localVarRequestOptions,\n             };\n         },\n         /**\n          * \n          * @summary Fetch details of an OpenSea asset\n          * @param {string} contractAddress Contract address for the token to lookup\n          * @param {string} id Token ID to lookup\n          * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)\n          * @param {*} [options] Override http request option.\n          * @throws {RequiredError}\n          */\n         getAsset: async (contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n             // verify required parameter 'contractAddress' is not null or undefined\n             assertParamExists('getAsset', 'contractAddress', contractAddress)\n             // verify required parameter 'id' is not null or undefined\n             assertParamExists('getAsset', 'id', id)\n             // verify required parameter 'network' is not null or undefined\n             assertParamExists('getAsset', 'network', network)\n             const localVarPath = `/asset`;\n             // use dummy base URL string because the URL constructor only accepts absolute URLs.\n             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n             let baseOptions;\n             if (configuration) {\n                 baseOptions = configuration.baseOptions;\n             }\n \n             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n             const localVarHeaderParameter = {} as any;\n             const localVarQueryParameter = {} as any;\n \n             if (contractAddress !== undefined) {\n                 localVarQueryParameter['contractAddress'] = contractAddress;\n             }\n \n             if (id !== undefined) {\n                 localVarQueryParameter['id'] = id;\n             }\n \n             if (network !== undefined) {\n                 localVarQueryParameter['network'] = network;\n             }\n \n \n     \n             setSearchParams(localVarUrlObj, localVarQueryParameter);\n             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n \n             return {\n                 url: toPathString(localVarUrlObj),\n                 options: localVarRequestOptions,\n             };\n         },\n     }\n };\n \n /**\n  * DefaultApi - functional programming interface\n  * @export\n  */\n export const DefaultApiFp = function(configuration?: Configuration) {\n     const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n     return {\n         /**\n          * \n          * @summary Create a batch transaction\n          * @param {InlineObject} [body] \n          * @param {*} [options] Override http request option.\n          * @throws {RequiredError}\n          */\n         async createBatchTransaction(body?: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SafeTransaction>> {\n             const localVarAxiosArgs = await localVarAxiosParamCreator.createBatchTransaction(body, options);\n             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n         },\n         /**\n          * \n          * @summary Fetch details of an OpenSea asset\n          * @param {string} contractAddress Contract address for the token to lookup\n          * @param {string} id Token ID to lookup\n          * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)\n          * @param {*} [options] Override http request option.\n          * @throws {RequiredError}\n          */\n         async getAsset(contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n             const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(contractAddress, id, network, options);\n             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n         },\n     }\n };\n \n /**\n  * DefaultApi - factory interface\n  * @export\n  */\n export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n     const localVarFp = DefaultApiFp(configuration)\n     return {\n         /**\n          * \n          * @summary Create a batch transaction\n          * @param {InlineObject} [body] \n          * @param {*} [options] Override http request option.\n          * @throws {RequiredError}\n          */\n         createBatchTransaction(body?: InlineObject, options?: any): AxiosPromise<SafeTransaction> {\n             return localVarFp.createBatchTransaction(body, options).then((request) => request(axios, basePath));\n         },\n         /**\n          * \n          * @summary Fetch details of an OpenSea asset\n          * @param {string} contractAddress Contract address for the token to lookup\n          * @param {string} id Token ID to lookup\n          * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)\n          * @param {*} [options] Override http request option.\n          * @throws {RequiredError}\n          */\n         getAsset(contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options?: any): AxiosPromise<object> {\n             return localVarFp.getAsset(contractAddress, id, network, options).then((request) => request(axios, basePath));\n         },\n     };\n };\n \n /**\n  * DefaultApi - object-oriented interface\n  * @export\n  * @class DefaultApi\n  * @extends {BaseAPI}\n  */\n export class DefaultApi extends BaseAPI {\n     /**\n      * \n      * @summary Create a batch transaction\n      * @param {InlineObject} [body] \n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      * @memberof DefaultApi\n      */\n     public createBatchTransaction(body?: InlineObject, options?: AxiosRequestConfig) {\n         return DefaultApiFp(this.configuration).createBatchTransaction(body, options).then((request) => request(this.axios, this.basePath));\n     }\n \n     /**\n      * \n      * @summary Fetch details of an OpenSea asset\n      * @param {string} contractAddress Contract address for the token to lookup\n      * @param {string} id Token ID to lookup\n      * @param {'rinkeby' | 'homestead'} network Ethereum network (Rinkeby / Homestead)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      * @memberof DefaultApi\n      */\n     public getAsset(contractAddress: string, id: string, network: 'rinkeby' | 'homestead', options?: AxiosRequestConfig) {\n         return DefaultApiFp(this.configuration).getAsset(contractAddress, id, network, options).then((request) => request(this.axios, this.basePath));\n     }\n }\n \n \n ","/* tslint:disable */\n/* eslint-disable */\n/**\n * API_ID optional-string\n * Sample API on API Gateway with a Google Cloud Functions backend\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n import { Configuration } from \"./configuration\";\n // Some imports not used depending on template conditions\n // @ts-ignore\n import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n \n export const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n \n /**\n  *\n  * @export\n  */\n export const COLLECTION_FORMATS = {\n     csv: \",\",\n     ssv: \" \",\n     tsv: \"\\t\",\n     pipes: \"|\",\n };\n \n /**\n  *\n  * @export\n  * @interface RequestArgs\n  */\n export interface RequestArgs {\n     url: string;\n     options: AxiosRequestConfig;\n }\n \n /**\n  *\n  * @export\n  * @class BaseAPI\n  */\n export class BaseAPI {\n     protected configuration: Configuration | undefined;\n \n     constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n         if (configuration) {\n             this.configuration = configuration;\n             this.basePath = configuration.basePath || this.basePath;\n         }\n     }\n };\n \n /**\n  *\n  * @export\n  * @class RequiredError\n  * @extends {Error}\n  */\n export class RequiredError extends Error {\n     name: \"RequiredError\" = \"RequiredError\";\n     constructor(public field: string, msg?: string) {\n         super(msg);\n     }\n }\n ","/* tslint:disable */\n/* eslint-disable */\n/**\n * API_ID optional-string\n * Sample API on API Gateway with a Google Cloud Functions backend\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n import { Configuration } from \"./configuration\";\n import { RequiredError, RequestArgs } from \"./base\";\n import { AxiosInstance, AxiosResponse } from 'axios';\n \n /**\n  *\n  * @export\n  */\n export const DUMMY_BASE_URL = 'https://example.com'\n \n /**\n  *\n  * @throws {RequiredError}\n  * @export\n  */\n export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n     if (paramValue === null || paramValue === undefined) {\n         throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n     }\n }\n \n /**\n  *\n  * @export\n  */\n export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n     if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n             ? await configuration.apiKey(keyParamName)\n             : await configuration.apiKey;\n         object[keyParamName] = localVarApiKeyValue;\n     }\n }\n \n /**\n  *\n  * @export\n  */\n export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n     if (configuration && (configuration.username || configuration.password)) {\n         object[\"auth\"] = { username: configuration.username, password: configuration.password };\n     }\n }\n \n /**\n  *\n  * @export\n  */\n export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n     if (configuration && configuration.accessToken) {\n         const accessToken = typeof configuration.accessToken === 'function'\n             ? await configuration.accessToken()\n             : await configuration.accessToken;\n         object[\"Authorization\"] = \"Bearer \" + accessToken;\n     }\n }\n \n /**\n  *\n  * @export\n  */\n export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n     if (configuration && configuration.accessToken) {\n         const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n             ? await configuration.accessToken(name, scopes)\n             : await configuration.accessToken;\n         object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n     }\n }\n \n /**\n  *\n  * @export\n  */\n export const setSearchParams = function (url: URL, ...objects: any[]) {\n     const searchParams = new URLSearchParams(url.search);\n     for (const object of objects) {\n         for (const key in object) {\n             if (Array.isArray(object[key])) {\n                 searchParams.delete(key);\n                 for (const item of object[key]) {\n                     searchParams.append(key, item);\n                 }\n             } else {\n                 searchParams.set(key, object[key]);\n             }\n         }\n     }\n     url.search = searchParams.toString();\n }\n \n /**\n  *\n  * @export\n  */\n export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n     const nonString = typeof value !== 'string';\n     const needsSerialization = nonString && configuration && configuration.isJsonMime\n         ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n         : nonString;\n     return needsSerialization\n         ? JSON.stringify(value !== undefined ? value : {})\n         : (value || \"\");\n }\n \n /**\n  *\n  * @export\n  */\n export const toPathString = function (url: URL) {\n     return url.pathname + url.search + url.hash\n }\n \n /**\n  *\n  * @export\n  */\n export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n     return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n         const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n         return axios.request<T, R>(axiosRequestArgs);\n     };\n }\n ","/* tslint:disable */\n/* eslint-disable */\n/**\n * API_ID optional-string\n * Sample API on API Gateway with a Google Cloud Functions backend\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import { Card, Title, Divider, Text, Button } from \"@gnosis.pm/safe-react-components\"\nimport { Network } from '@ethersproject/providers';\nimport { capitalizeFirstLetter } from \"../utils\"\n\ntype Props = {\n    supportedNetworks: Network[];\n    toNextTab: () => void;\n}\n\nconst Step1 = ({supportedNetworks, toNextTab}: Props): React.ReactElement => {\n    return (\n        <Card className=\"card\">\n            <Title size=\"xs\">Introduction</Title>\n            <Text size=\"xl\">\n                This app allows for creation of a single transaction to purchase multiple \n                OpenSea assets in batch from a Gnosis Safe. All purchases will\n                succeed or fail in unison.\n            </Text>\n            <Divider/>\n            <Text size=\"md\">\n                The tool uses <a href=\"https://www.npmjs.com/package/ethers-multisend\">ethers-multisend</a> by \n                Gnosis for batching transactions\n                and <a href=\"https://www.npmjs.com/package/@gsgalloway/opensea-js\">opensea-js</a> for\n                crafting individual purchase transactions. Source code for this \n                app <a href=\"https://github.com/gsgalloway/opensea-batch-purchase-react\">available here.</a>\n            </Text>\n            <Divider/>\n            <Text size=\"xl\">Supported networks: {\n                supportedNetworks.map((network) =>\n                    (<span className=\"NetworkName\">{capitalizeFirstLetter(network.name)} </span>))\n            }\n            </Text>\n            <Divider/>\n            <Button size=\"md\" onClick={toNextTab}>\n                  Continue\n            </Button>\n        </Card>\n    )\n}\n\nexport default Step1\n","import { Card, Title, Text, AddressInput, Divider, Button } from \"@gnosis.pm/safe-react-components\";\n\ntype Props = {\n    address: string;\n    onChangeAddress: (address: string) => void;\n    toNextTab: () => void;\n}\n\nconst StepFour = ({address, onChangeAddress, toNextTab}: Props): React.ReactElement => {\n    return (\n        <Card className=\"card\">\n          <Title size=\"xs\">Enter Gnosis Safe Address</Title>\n          <Text size=\"xl\">Enter the address of the Gnosis Safe that will process the purchase.</Text>\n          <AddressInput address={address} onChangeAddress={onChangeAddress} name=\"address\" label={\"Gnosis Safe Address\"}></AddressInput>\n          <Divider/>\n          <Button size=\"md\" onClick={toNextTab}>\n            Continue\n          </Button>\n      </Card>\n    )\n}\n\nexport default StepFour\n","import { Card, Title, Text, Button, Divider } from \"@gnosis.pm/safe-react-components\"\n\ntype Props = {\n    onSubmitTransaction: () => void;\n}\n\nconst StepFive = ({onSubmitTransaction}: Props): React.ReactElement => {\n    return (\n        <Card className=\"card\">\n            <Title size=\"xs\">Build Transaction Data</Title>\n            <Text size=\"md\">This step will build the raw transaction data to effect the whole set of purchases. No transactions are signed or broadcast at this step. You can review the results in the next step.</Text>\n            <Divider/>\n            <Button size='md' onClick={onSubmitTransaction}>Submit</Button>\n      </Card>\n    )\n}\n\nexport default StepFive\n","import { Card, Title, Divider, Text, Button } from \"@gnosis.pm/safe-react-components\"\nimport { capitalizeFirstLetter, NetworkConnectionInfo } from \"../utils\"\nimport { Network } from '@ethersproject/providers'\nimport './Step2.css'\n\ntype Props = {\n    networkConnectionInfo?: NetworkConnectionInfo;\n    connect: () => Promise<void>;\n    disconnect: () => Promise<void>;\n    toNextTab: () => void;\n    supportedNetworks: Network[];\n}\n\nconst Step2 = ({networkConnectionInfo, connect, disconnect, toNextTab, supportedNetworks}: Props): React.ReactElement => {\n    const networkIsSupported = networkConnectionInfo && supportedNetworks.find(network => network.chainId === networkConnectionInfo.network.chainId)\n    return (\n        <Card className=\"card\">\n          <Title size=\"xs\">Connect Web3 Provider</Title>\n          {networkConnectionInfo ? (\n            <div>\n              <Text size=\"lg\">Connected to: <span className=\"NetworkName\">{capitalizeFirstLetter(networkConnectionInfo.network.name)}</span></Text>\n              <Divider/>\n              <Button className=\"CrowdedButton\" size=\"md\" onClick={disconnect}>\n                Disconnect\n              </Button>\n              <Button disabled={!networkIsSupported} className=\"CrowdedButton\" size=\"md\" onClick={toNextTab}>\n                  Continue\n              </Button>\n            </div>\n          ) : (\n            <Button size=\"md\" onClick={connect}>\n              Connect\n            </Button>\n          )}\n      </Card>\n    )\n}\n\nexport default Step2\n","import { Card, Loader, Table, TableAlignment, TableRow, Text } from \"@gnosis.pm/safe-react-components\"\nimport { TokenDescription } from \"./types\"\nimport { formatEther } from \"@ethersproject/units\";\nimport { UseQueryResult } from 'react-query';\nimport { OpenSeaAsset } from \"opensea-js/lib/types\";\nimport { BigNumber } from \"ethers\";\nimport './TokenList.css'\nimport { isForSale } from \"./utils\";\n\ntype Props = {\n    tokenDescriptions: Array<TokenDescription>,\n    tokenListings: Array<UseQueryResult<OpenSeaAsset>>,\n}\n\ntype RowCell = {\n    id?: string;\n    alignment?: TableAlignment;\n    content: React.ReactNode;\n};\n\nconst TokenList = ({tokenDescriptions, tokenListings}: Props): React.ReactElement => {\n    const buildTableRows = (): TableRow[] => {\n        return tokenListings.map((tokenListing, idx): TableRow => {\n            const token = tokenDescriptions[idx];\n            return {\n                id: token.id.toString(),\n                cells: buildCellsForRow(token, tokenListing),\n            }\n        })\n    }\n\n    const buildCellsForRow = (token: TokenDescription, listing: UseQueryResult<OpenSeaAsset>): RowCell[] => {\n        const {data, isLoading, isError, error} = listing;\n        if (isLoading) {\n            return [{\n                content: <Text size=\"lg\">Token ID: {token.id.toString()}</Text> \n            }, {\n                content: <Text size=\"lg\">Token Contract: {token.contractAddress}</Text>  \n            }, {\n                content: <Loader size={\"sm\"} />\n            }]\n        }\n        if (isError || data === undefined) {\n            console.error(error);\n            return [{\n                content: <Text size=\"lg\">Token ID: {token.id.toString()}</Text> \n            }, {\n                content: <Text size=\"lg\">Token Contract: {token.contractAddress}</Text> \n            }, {\n                content: <Text size=\"lg\" color=\"error\">Error: {(error as Error | undefined)?.message}</Text>\n            }]\n        }\n\n        let priceText: JSX.Element\n        if (isForSale(data)) {\n            priceText = <Text size=\"lg\">Ξ{formatEther(BigNumber.from(data.sellOrders[0].basePrice))}</Text>;\n        } else {\n            priceText = <Text size=\"lg\" strong={true} color=\"error\">Not for sale!</Text>\n        }\n        return [{\n            content: <Text size=\"lg\">{data.name}</Text>\n        }, {\n            content: priceText\n        }, {\n            content: <a href={data.openseaLink} target=\"_blank\" rel=\"noreferrer\">View on OpenSea </a>\n        }, {\n            content: <img src={data.imageUrl} alt={data.imageUrl} />\n        }];\n    }\n\n    const sumPurchasePrices = (): string => {\n        const sum = tokenListings\n            .map(({data: token, isLoading, isError}) => {\n                if (isLoading || isError || token === undefined) {\n                    return BigNumber.from(0);\n                }\n                if (!isForSale(token)) {\n                    return BigNumber.from(0);\n                }\n                return BigNumber.from(token.sellOrders[0].basePrice)\n            })\n            .reduce((prev, next) => prev.add(next))\n        return \"Ξ\" + formatEther(sum)\n    }\n\n    return <>\n        <Card>\n            <Text size=\"lg\">Total: {sumPurchasePrices()}</Text>\n        </Card>\n        <Table rows={buildTableRows()} />\n    </>\n}\n\nexport default TokenList","export default __webpack_public_path__ + \"static/media/opensea_details.09ccfcc9.png\";","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Divider } from '@gnosis.pm/safe-react-components';\n\nimport {\n  GenericModal,\n  Icon,\n  Text,\n  Button,\n  Switch,\n  ModalFooterConfirmation,\n} from '@gnosis.pm/safe-react-components';\n\nconst SearchInput = styled.input`\n  border: none;\n  background-color: transparent;\n  box-shadow: none;\n  font-family: ${({ theme }) => theme.fonts.fontFamily};\n  width: 250px;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nconst BodyHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  padding: 0 24px;\n`;\n\nconst SearchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  height: 52px;\n  border-right: 2px solid ${({ theme }) => theme.colors.separator};\n`;\n\nconst StyledItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0px 24px;\n  height: 51px;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n\n  :last-child {\n    border-bottom: 0px;\n  }\n`;\n\nconst StyledImage = styled.img`\n  width: 26px;\n  height: 26px;\n  object-fit: contain;\n  margin: 0 16px 0 0;\n`;\n\nconst StyledImageName = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 24px;\n`;\n\nconst TextDesc = styled(Text)`\n  width: 350px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst UnstyledButton = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  outline-color: ${({ theme }) => theme.colors.separator};\n`;\n\nconst StyledDivider = styled(Divider)`\n  height: 30px;\n`;\n\ntype Props = {\n  title?: string;\n  defaultIconUrl: string;\n  showDeleteButton?: boolean;\n  itemList: Array<{\n    id: number | string;\n    iconUrl: string;\n    name: string;\n    description?: string;\n    checked: boolean;\n    isDeletable?: boolean;\n  }>;\n  addButtonLabel?: string;\n  formBody: React.ReactNode;\n  isSubmitFormDisabled?: boolean;\n  onSubmitForm: () => void;\n  onItemToggle: (itemId: number | string, checked: boolean) => void;\n  onItemDeleted?: (itemId: number | string) => void;\n  onClose: () => void;\n};\n\nconst ManageList = ({\n  title = 'Manage List',\n  itemList,\n  showDeleteButton,\n  defaultIconUrl,\n  formBody,\n  addButtonLabel = 'add',\n  isSubmitFormDisabled = false,\n  onSubmitForm,\n  onItemToggle,\n  onItemDeleted,\n  onClose,\n}: Props): JSX.Element => {\n  const [search, setSearch] = useState('');\n  const [isFormMode, setIsFormMode] = useState(false);\n\n  const setDefaultImage = (e: React.SyntheticEvent<HTMLImageElement>): void => {\n    (e.target as HTMLImageElement).onerror = null;\n    (e.target as HTMLImageElement).src = defaultIconUrl;\n  };\n\n  const getFilteredItemList = () => {\n    if (!search || !search.length) {\n      return itemList;\n    }\n\n    return itemList.filter(\n      (i) =>\n        i.name.toLowerCase().includes(search.toLowerCase()) ||\n        i.description?.toLowerCase().includes(search.toLowerCase())\n    );\n  };\n\n  const getBody = () => {\n    return isFormMode ? (\n      <FormContainer>{formBody}</FormContainer>\n    ) : (\n      <>\n        <BodyHeader>\n          <SearchContainer>\n            <Icon size=\"md\" type=\"search\" />\n            <SearchInput\n              onChange={(event) => setSearch(event.target.value)}\n              placeholder=\"Search\"\n              value={search}\n            />\n          </SearchContainer>\n          <Button\n            size=\"md\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={() => setIsFormMode(!isFormMode)}>\n            <Text size=\"lg\" color=\"white\">\n              + {addButtonLabel}\n            </Text>\n          </Button>\n        </BodyHeader>\n        <div>\n          {getFilteredItemList().map((i) => {\n            const onChange = (checked: boolean) => onItemToggle(i.id, checked);\n            const onDeleteClick = () => onItemDeleted?.(i.id);\n\n            return (\n              <StyledItem key={i.id}>\n                {/* Item description */}\n                <StyledImageName>\n                  <StyledImage\n                    alt={i.name}\n                    onError={setDefaultImage}\n                    src={i.iconUrl}\n                  />\n                  <div>\n                    <div>\n                      <Text size=\"lg\" strong>\n                        {i.name}\n                      </Text>\n                    </div>\n                    <div>\n                      <TextDesc size=\"md\">\n                        {i.description && i.description}\n                      </TextDesc>\n                    </div>\n                  </div>\n                </StyledImageName>\n\n                {/* Switch */}\n                <Switch checked={i.checked} onChange={onChange} />\n\n                {/* Delete button */}\n                {showDeleteButton && (\n                  <>\n                    <StyledDivider orientation=\"vertical\" />\n                    <UnstyledButton\n                      onClick={onDeleteClick}\n                      disabled={!i.isDeletable}>\n                      <Icon\n                        size=\"md\"\n                        color={i.isDeletable ? 'error' : 'icon'}\n                        type=\"delete\"\n                      />\n                    </UnstyledButton>\n                  </>\n                )}\n              </StyledItem>\n            );\n          })}\n        </div>\n      </>\n    );\n  };\n\n  const getFooter = () => {\n    return !isFormMode ? null : (\n      <ModalFooterConfirmation\n        okText=\"Save\"\n        okDisabled={isSubmitFormDisabled}\n        handleCancel={() => setIsFormMode(false)}\n        handleOk={() => {\n          setIsFormMode(false);\n          onSubmitForm();\n        }}\n      />\n    );\n  };\n\n  return (\n    <GenericModal\n      onClose={onClose}\n      title={title}\n      body={getBody()}\n      footer={getFooter()}\n      withoutBodyPadding\n    />\n  );\n};\n\nexport default ManageList;\n","import { Text, TextField } from \"@gnosis.pm/safe-react-components\";\nimport styled from 'styled-components'\n\ntype Props = {\n    tokenID: string,\n    tokenContractAddress: string,\n    onTokenIDChanged: (tokenID: string) => void,\n    onTokenContractAddressChanged: (tokenContractAddress: string) => void,\n};\n\nconst Container = styled.div`\n  padding: 1rem;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\n\nconst NFTForm = ({tokenID, tokenContractAddress, onTokenIDChanged, onTokenContractAddressChanged}: Props): React.ReactElement => {\n    return <>\n        <Container>\n            <Text size=\"lg\">Enter token ID (a number) and the token's contract address <br/>Ex: '0x059edd72cd353df5106d2b9cc5ab83a52287ac3a' for Artblocks</Text>\n            <br />\n            <TextField\n                id=\"standard-name\"\n                label=\"Token Contract Address\"\n                value={tokenContractAddress}\n                onChange={(e) => onTokenContractAddressChanged(e.target.value)}\n                input={{ type: 'text', pattern: \"[A-Za-z]{3}\" }}\n            />\n            <br />\n            <TextField\n                id=\"standard-name\"\n                label=\"Token ID\"\n                value={tokenID}\n                onChange={(e) => onTokenIDChanged(e.target.value)}\n                input={{ type: 'number', min: 0  }}\n            />\n        </Container>\n    </>\n}\n\nexport default NFTForm;\n","import { Card, Divider, Text, Accordion, AccordionSummary, IconText, AccordionDetails, Button } from \"@gnosis.pm/safe-react-components\"\nimport TokenList from \"../TokenList\";\nimport openseaDetailsImage from './opensea_details.png';\nimport { TokenDescription } from \"../types\";\nimport { UseQueryResult } from \"react-query\";\nimport { OpenSeaAsset } from \"opensea-js/lib/types\";\nimport ManageListModal from \"../ManageListModal\";\nimport NFTForm from \"../NFTForm\";\nimport './Step3.css';\n\ntype Props = {\n    isManageListModalOpen: boolean,\n    setIsManageListModalOpen: (val: boolean) => void,\n    tokens: TokenDescription[],\n    tokenListings: Array<UseQueryResult<OpenSeaAsset>>,\n    inputTokenID: string,\n    setInputTokenID: (tokenId: string) => void,\n    inputTokenContractAddress: string,\n    setInputTokenContractAddress: (addr: string) => void,\n    onSubmitForm: () => void,\n    onItemDeleted?: (itemId: number | string) => void;\n    toNextTab: () => void;\n    tokenListError: Error | null;\n}\n\nconst Step3 = ({\n    isManageListModalOpen,\n    setIsManageListModalOpen,\n    tokens,\n    tokenListings,\n    inputTokenID,\n    setInputTokenID,\n    inputTokenContractAddress,\n    setInputTokenContractAddress,\n    onSubmitForm,\n    onItemDeleted,\n    toNextTab,\n    tokenListError,\n}: Props): React.ReactElement => {\n    const getListItems = () => {\n        return Array.from(tokens.entries()).map(([index, token]) => {\n          return {\n                id: index,\n                iconUrl: 'someUrl',\n                name: `${token.id}`,\n                description: `Token at ${token.contractAddress}`,\n                checked: true,\n                isDeletable: true,\n          };\n        })\n    }\n\n    const buttonDisabled = !!tokenListError || tokenListings.map(({isSuccess}) => !isSuccess).reduce((prev, cur) => prev && cur)\n\n    return (\n        <Card className=\"card\">\n          <Text size=\"xl\">Enter a list of tokens to purchase. Contract Address and ID are required for each.</Text>\n          <Accordion>\n            <AccordionSummary>\n              <IconText\n                iconSize=\"sm\"\n                textSize=\"xl\"\n                iconType=\"info\"\n                text=\"How to locate token's Contract Address and ID\"\n              />\n            </AccordionSummary>\n            <AccordionDetails>\n              <Text size=\"lg\">The contract address and token ID can be found on the asset's details page within the OpenSea app, by locating the \"Details\" dropdown midway through the page.</Text>\n              <img src={openseaDetailsImage} alt=\"openseaExample\" style={{width: \"50%\"}}></img>\n            </AccordionDetails>\n          </Accordion>\n          {tokens.length > 0 ? (\n            <Card className=\"card\">\n              <TokenList tokenDescriptions={tokens} tokenListings={tokenListings}/>\n            </Card>\n          ) : <div/>}\n          <Divider/>\n          <Button className=\"CrowdedButton\" size=\"md\" color=\"primary\" onClick={() => setIsManageListModalOpen(!isManageListModalOpen)}>\n            Edit Token List\n          </Button>\n          {tokens.length > 0 ? <Button className=\"CrowdedButton\" size=\"md\" disabled={buttonDisabled} onClick={toNextTab}>\n                {tokenListError == null ? 'Continue' : tokenListError.message }\n          </Button> : <div/>}\n          {isManageListModalOpen && (\n            <ManageListModal\n              title={\"Add Token\"}\n              defaultIconUrl={\"https://opensea.io/static/images/logos/opensea.svg\"}\n              itemList={getListItems()}\n              showDeleteButton\n              addButtonLabel=\"Add token to batch\"\n              formBody={<NFTForm\n                tokenID={inputTokenID}\n                tokenContractAddress={inputTokenContractAddress}\n                onTokenIDChanged={setInputTokenID}\n                onTokenContractAddressChanged={setInputTokenContractAddress}\n              />}\n              onSubmitForm={onSubmitForm}\n              onClose={() => setIsManageListModalOpen(false)}\n              onItemToggle={() => undefined}\n              onItemDeleted={onItemDeleted}\n            />\n          )}\n        </Card>\n    )\n}\n\nexport default Step3\n","export const gnosisSafeABI = [\n    {\n      inputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"constructor\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n      ],\n      name: \"AddedOwner\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"bytes32\",\n          name: \"approvedHash\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n      ],\n      name: \"ApproveHash\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"handler\",\n          type: \"address\",\n        },\n      ],\n      name: \"ChangedFallbackHandler\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"guard\",\n          type: \"address\",\n        },\n      ],\n      name: \"ChangedGuard\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"threshold\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"ChangedThreshold\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"DisabledModule\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"EnabledModule\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"txHash\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"payment\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"ExecutionFailure\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"ExecutionFromModuleFailure\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"ExecutionFromModuleSuccess\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"txHash\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"payment\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"ExecutionSuccess\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n      ],\n      name: \"RemovedOwner\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"SafeReceived\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"initiator\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address[]\",\n          name: \"owners\",\n          type: \"address[]\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"threshold\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"initializer\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"fallbackHandler\",\n          type: \"address\",\n        },\n      ],\n      name: \"SafeSetup\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"bytes32\",\n          name: \"msgHash\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"SignMsg\",\n      type: \"event\",\n    },\n    {\n      stateMutability: \"nonpayable\",\n      type: \"fallback\",\n    },\n    {\n      inputs: [],\n      name: \"VERSION\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_threshold\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"addOwnerWithThreshold\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"hashToApprove\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"approveHash\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"approvedHashes\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_threshold\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"changeThreshold\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"dataHash\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"signatures\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"requiredSignatures\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"checkNSignatures\",\n      outputs: [],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"dataHash\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"signatures\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"checkSignatures\",\n      outputs: [],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"prevModule\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"disableModule\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"domainSeparator\",\n      outputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"\",\n          type: \"bytes32\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"enableModule\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"enum Enum.Operation\",\n          name: \"operation\",\n          type: \"uint8\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"safeTxGas\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"baseGas\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"gasPrice\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address\",\n          name: \"gasToken\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"refundReceiver\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_nonce\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"encodeTransactionData\",\n      outputs: [\n        {\n          internalType: \"bytes\",\n          name: \"\",\n          type: \"bytes\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"enum Enum.Operation\",\n          name: \"operation\",\n          type: \"uint8\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"safeTxGas\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"baseGas\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"gasPrice\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address\",\n          name: \"gasToken\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address payable\",\n          name: \"refundReceiver\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"signatures\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"execTransaction\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"success\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"enum Enum.Operation\",\n          name: \"operation\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"execTransactionFromModule\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"success\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"enum Enum.Operation\",\n          name: \"operation\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"execTransactionFromModuleReturnData\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"success\",\n          type: \"bool\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"returnData\",\n          type: \"bytes\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"getChainId\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"start\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"pageSize\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getModulesPaginated\",\n      outputs: [\n        {\n          internalType: \"address[]\",\n          name: \"array\",\n          type: \"address[]\",\n        },\n        {\n          internalType: \"address\",\n          name: \"next\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"getOwners\",\n      outputs: [\n        {\n          internalType: \"address[]\",\n          name: \"\",\n          type: \"address[]\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"offset\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"length\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getStorageAt\",\n      outputs: [\n        {\n          internalType: \"bytes\",\n          name: \"\",\n          type: \"bytes\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"getThreshold\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"enum Enum.Operation\",\n          name: \"operation\",\n          type: \"uint8\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"safeTxGas\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"baseGas\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"gasPrice\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address\",\n          name: \"gasToken\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"refundReceiver\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_nonce\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getTransactionHash\",\n      outputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"\",\n          type: \"bytes32\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"module\",\n          type: \"address\",\n        },\n      ],\n      name: \"isModuleEnabled\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n      ],\n      name: \"isOwner\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"nonce\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"prevOwner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_threshold\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"removeOwner\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"enum Enum.Operation\",\n          name: \"operation\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"requiredTxGas\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"handler\",\n          type: \"address\",\n        },\n      ],\n      name: \"setFallbackHandler\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"guard\",\n          type: \"address\",\n        },\n      ],\n      name: \"setGuard\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address[]\",\n          name: \"_owners\",\n          type: \"address[]\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_threshold\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"address\",\n          name: \"fallbackHandler\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"paymentToken\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"payment\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address payable\",\n          name: \"paymentReceiver\",\n          type: \"address\",\n        },\n      ],\n      name: \"setup\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"signedMessages\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"targetContract\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"calldataPayload\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"simulateAndRevert\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"prevOwner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"oldOwner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"swapOwner\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"receive\",\n    },\n  ];\n","import { Card, Title, Text, Loader, Accordion, AccordionDetails, AccordionSummary, Divider, IconText, Button, EthHashInfo } from \"@gnosis.pm/safe-react-components\"\nimport { BigNumber, Contract, Signer } from \"ethers\";\nimport { Web3Provider, Network } from '@ethersproject/providers';\nimport { signHash, calculateSafeTransactionHash } from \"@gnosis.pm/safe-contracts\";\nimport { SafeTransaction } from \"../api\";\nimport SafeServiceClient from \"@gnosis.pm/safe-service-client\";\nimport EthSafeTransaction from '@gnosis.pm/safe-core-sdk/dist/src/utils/transactions/SafeTransaction';\nimport { gnosisSafeABI } from '../gnosis-abi';\nimport { EthSignSignature } from \"@gnosis.pm/safe-core-sdk\";\nimport './Step6.css'\n\ntype Props = {\n    safeTransaction: SafeTransaction | undefined,\n    isLoading: boolean,\n    isError: boolean,\n    isSuccess: boolean,\n    error: Error | undefined,\n    signer: Signer,\n    signerAddress: string,\n    provider: Web3Provider,\n    network: Network,\n    safeAddress: string,\n}\n\nfunction loadingBody(): JSX.Element {\n    return (\n        <div>\n            <Loader size=\"lg\"/>\n            <Text size=\"lg\">Waiting for transaction body...</Text>\n        </div>\n    )\n}\n\nfunction errorBody(error?: Error): JSX.Element {\n    return <Text size=\"lg\" strong={true}>Error: {error?.message}</Text>\n}\n\nconst Step6 = ({\n    safeTransaction,\n    isLoading,\n    isError,\n    isSuccess,\n    error,\n    signer,\n    signerAddress,\n    provider,\n    network,\n    safeAddress,\n}: Props): React.ReactElement => {\n\n    // The request to build the transaction hasn't been submitted yet.\n    if (!isLoading && !isError && !isSuccess) {\n        return <div/>\n    }\n\n    let body: JSX.Element\n    if (isLoading) {\n        body = loadingBody();\n    }\n    else if (isError) {\n        body = errorBody(error);\n    }\n    else if (safeTransaction === undefined) {\n        body = errorBody(new Error('No SafeTransaction received'))\n    }\n    else {\n        const proposeTransaction = async (): Promise<void> => {\n            try {\n                const safeContract = new Contract(safeAddress, gnosisSafeABI);            \n                const typedSafeTx = {\n                    ...safeTransaction,\n                    nonce: BigNumber.from(safeTransaction.nonce).toNumber(),\n                    operation: BigNumber.from(safeTransaction.operation).toNumber(),\n                }\n                const safeTxHash = calculateSafeTransactionHash(safeContract, typedSafeTx, network.chainId);\n                const signature = await signHash(signer, safeTxHash);\n            \n                let safeServiceURL = 'https://safe-transaction.gnosis.io';\n                if (network.name === 'rinkeby') {\n                safeServiceURL = 'https://safe-transaction.rinkeby.gnosis.io';\n                }\n                const safeService = new SafeServiceClient(safeServiceURL);\n            \n                const ethSafeTx = new EthSafeTransaction({\n                    baseGas: BigNumber.from(safeTransaction.baseGas).toNumber(),\n                    data: safeTransaction.data,\n                    gasPrice: BigNumber.from(safeTransaction.gasPrice).toNumber(),\n                    gasToken: safeTransaction.gasToken,\n                    nonce: BigNumber.from(safeTransaction.nonce).toNumber(),\n                    operation: BigNumber.from(safeTransaction.operation).toNumber(),\n                    refundReceiver: safeTransaction.refundReceiver,\n                    safeTxGas: BigNumber.from(safeTransaction.safeTxGas).toNumber(),\n                    to: safeTransaction.to,\n                    value: BigNumber.from(safeTransaction.value).toString(),\n                })\n                ethSafeTx.addSignature(new EthSignSignature(signature.signer, signature.data));\n            \n                await safeService.proposeTransaction({\n                safeAddress,\n                safeTransaction: ethSafeTx,\n                senderAddress: await signer.getAddress(),\n                safeTxHash: safeTxHash,\n                })\n\n                alert(\"Transaction proposed! Please review and execute on the Transactions tab in the Gnosis UI. Please note that it may take minutes for the Gnosis UI to reflect the new transaction.\")\n            } catch (e) {\n                console.error(e);\n                alert(`Failed to propose transaction: ${e}`);\n            }\n        }\n        body = (\n            <>\n                <Card>\n                    <Text size=\"lg\">1. Review Transaction Details</Text>\n                    <Accordion>\n                    <AccordionSummary>\n                        <IconText\n                            iconSize=\"sm\"\n                            textSize=\"xl\"\n                            iconType=\"arrowRight\"\n                            text=\"To\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Card>\n                        <EthHashInfo hash={safeTransaction.to} showAvatar/>\n                        <Text size=\"sm\">\n                            This is the address \n                            of <a href=\"https://github.com/gnosis/safe-contracts/blob/main/contracts/libraries/MultiSend.sol\" target=\"_blank\" rel=\"noreferrer\">\n                                the MultiSend library\n                            </a>\n                        </Text>\n                        </Card>\n                    </AccordionDetails>\n                    </Accordion>\n                    <Accordion>\n                    <AccordionSummary>\n                        <IconText\n                            iconSize=\"sm\"\n                            textSize=\"xl\"\n                            iconType=\"arrowRight\"\n                            text=\"Data\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Text className=\"OverflowText\" size=\"sm\">\n                            {safeTransaction.data}\n                        </Text>\n                    </AccordionDetails>\n                    </Accordion>\n                    <Accordion>\n                    <AccordionSummary>\n                        <IconText\n                        iconSize=\"sm\"\n                        textSize=\"xl\"\n                        iconType=\"arrowRight\"\n                        text=\"Operation Type\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Text size=\"lg\">DELEGATE_CALL</Text>\n                    </AccordionDetails>\n                    </Accordion>\n                    <Accordion>\n                    <AccordionSummary>\n                        <IconText\n                            iconSize=\"sm\"\n                            textSize=\"xl\"\n                            iconType=\"arrowRight\"\n                            text=\"Nonce\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Text size=\"lg\">{safeTransaction.nonce}</Text>\n                    </AccordionDetails>\n                    </Accordion>\n                </Card>\n                <Card>\n                    <Title size=\"xs\">2. Submit</Title>\n                    <Text size=\"lg\">Signing transaction as <EthHashInfo hash={signerAddress} showAvatar /></Text>\n                    <Text strong size=\"md\">\n                        Note that this address must be either an owner of this safe or a delegate of an owner.\n                        Signing as a delegate is preferred, as signatures from delegates are never counted toward a safe's signature threshold.\n                        To register a delegate, <a target=\"_blank\" href=\"https://gnosis-delegator.badger.guru/\" rel=\"noreferrer\">try this utility.</a>\n                    </Text>\n                    <Text strong size=\"md\">\n                        An invocation of\n                        OpenSea's <a target=\"_blank\" href=\"https://etherscan.io/address/0x7be8076f4ea4a4ad08075c2508e481d6c946d12b#code#L1363\" rel=\"noreferrer\">public function for fulfilling an order</a> is\n                        difficult to understand at a glance. Additionally, the failure modes for these purchases can be quite opaque. In order to gain confidence in the correctness of a transaction before \n                        its broadcast, it is recommended to try simulating the transaction before approval and once again just before broadcast. A tool for simulating Gnosis Safe transactions created by this tool\n                        is available <a target=\"_blank\" href=\"https://github.com/gsgalloway/opensea-batch-purchase/blob/main/packages/lib/README.md#simulating-a-transaction-before-execution\" rel=\"noreferrer\">here.</a>\n                    </Text>\n                    <Divider/>\n                    <Button size=\"lg\" onClick={proposeTransaction}>Prompt Signature</Button>\n                </Card>\n            </>\n        )\n    }\n\n    return (\n        <Card className=\"card\">\n            <Title size=\"xs\">Review and Submit</Title>\n            {body}            \n        </Card>\n    )\n}\n\nexport default Step6\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Tab, Title } from '@gnosis.pm/safe-react-components'\nimport { BigNumber } from 'ethers';\nimport { TokenDescription } from './types';\nimport { Network, getNetwork, Web3Provider } from '@ethersproject/providers';\nimport { useQueries, useQuery } from 'react-query';\nimport { isForSale, NetworkConnectionInfo, unreachable } from './utils';\nimport Web3Modal from 'web3modal'\nimport { Configuration, DefaultApi, InlineObjectNetworkEnum, SafeTransaction } from './api';\nimport { OpenSeaAsset } from 'opensea-js/lib/types';\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab';\nimport Step1 from './steps/Step1'\nimport Step4 from './steps/Step4';\nimport Step5 from './steps/Step5';\nimport Step2 from './steps/Step2';\nimport Step3 from './steps/Step3';\nimport Step6 from './steps/Step6';\nimport './App.css';\n\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true,\n})\n\nconst loadTokenAsset = async (token: TokenDescription, api: DefaultApi, network: Network): Promise<OpenSeaAsset> => {\n  const resp = await api.getAsset(token.contractAddress, token.id.toString(), network.name as any, {\n    validateStatus: (status) => status === 200,\n  })\n  const sellOrders = (resp.data as OpenSeaAsset).sellOrders\n  if (sellOrders) {\n      sellOrders.sort((order1, order2) => {\n          const [bn1, bn2] = [order1.basePrice, order2.basePrice].map(BigNumber.from)\n          if (bn1.lt(bn2)) return -1\n          if (bn1.gt(bn2)) return 1\n          return 0;\n      })\n  }\n  return resp.data as OpenSeaAsset\n}\n\nconst api = new DefaultApi(new Configuration({\n  basePath: process.env.REACT_APP_API_HOST ?? \"http://localhost:8080\",\n}));\n\nconst SafeApp = (): React.ReactElement => {\n  const [selectedTabIndex, setSelectedTabIndex] = useState('1');\n  const [isManageListModalOpen, setIsManageListModalOpen] = useState(false);\n  const [tokens, setTokens] = useState<TokenDescription[]>([])\n  const [inputTokenID, setInputTokenID] = useState('');\n  const [inputTokenContractAddress, setInputTokenContractAddress] = useState('');\n  const [networkConnectionInfo, setNetworkConnectionInfo] = useState<NetworkConnectionInfo | undefined>(undefined);\n  const [safeAddress, setSafeAddress] = useState(networkConnectionInfo?.address);\n\n  const tokenListings = useQueries(\n    networkConnectionInfo ? tokens.map(token => {\n        return {\n            queryKey: ['loadTokenAsset', token.contractAddress, token.id],\n            queryFn: () => loadTokenAsset(token, api, networkConnectionInfo.network),\n            refetchOnWindowFocus: false,\n            staleTime: Infinity,\n        }\n    }) : []\n  )\n\n  const submitTransactionQueryFn = async (): Promise<SafeTransaction> => {\n    if (!networkConnectionInfo) {\n      throw new Error(\"No connection to Web3 provider\")\n    }\n    const networkName = networkConnectionInfo.network.name as InlineObjectNetworkEnum\n    switch (networkName) {\n      case InlineObjectNetworkEnum.Homestead:\n      case InlineObjectNetworkEnum.Rinkeby:\n        break\n      default:\n        throw unreachable(networkName, `Unsupported network \"${networkName}\"`)\n    }\n    const serializedTokens = tokens.map(token => {\n      return {\n        ...token,\n        id: token.id.toString()\n      }\n    })\n    if (safeAddress === undefined) {\n      throw new Error(\"No safe address set\");\n    }\n    setSelectedTabIndex('6')\n    const response = await api.createBatchTransaction({\n      network: networkName,\n      gnosisSafeAddress: safeAddress,\n      recipient: safeAddress,\n      tokens: serializedTokens,\n    }, {\n      validateStatus: (status) => status === 200 || status === 400,  \n    })\n    if (response.status === 400) {\n      throw new Error(\"Invalid transaction. Check that all requested assets are still for sale and that the purchasing account has sufficient funds.\")\n    }\n    return response.data;\n  }\n\n  const { \n    data: safeTransaction,\n    isLoading: isSafeTransactionLoading,\n    isError: isSafeTransactionError,\n    isSuccess: isSafeTransactionSuccess,\n    error: safeTransactionError,\n    refetch: submitTransaction,\n  } = useQuery([\"submitTransaction\", tokens], {\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n    enabled: false, // turned off by default, manual refetch happens when Submit button is clicked\n    queryFn: submitTransactionQueryFn,\n  });\n\n  const connect = useCallback(async function () {\n    // This is the initial `provider` that is returned when\n    // using web3Modal to connect. Can be MetaMask or WalletConnect.\n    const provider = await web3Modal.connect()\n\n    // We plug the initial `provider` into ethers.js and get back\n    // a Web3Provider. This will add on methods from ethers.js and\n    // event listeners such as `.on()` will be different.\n    const web3Provider = new Web3Provider(provider)\n\n    const accounts = await web3Provider.listAccounts();\n    if (accounts.length === 0) {\n      console.error(\"Empty list of connected accounts\")\n      return;\n    }\n    const signer = web3Provider.getSigner(accounts[0])\n    const address = accounts[0];\n    const network = await web3Provider.getNetwork()\n    setNetworkConnectionInfo({provider, signer, address, network, web3Provider})\n  }, [])\n\n  const disconnect = useCallback(\n    async function () {\n      await web3Modal.clearCachedProvider()\n      if (networkConnectionInfo?.provider?.disconnect && typeof networkConnectionInfo?.provider.disconnect === 'function') {\n        await networkConnectionInfo.provider.disconnect()\n      }\n      setNetworkConnectionInfo(undefined)\n      setIsManageListModalOpen(false);\n      setSelectedTabIndex('2');\n    },\n    [networkConnectionInfo]\n  )\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      connect()\n    }\n  }, [connect])\n\n  useEffect(() => {\n    if (networkConnectionInfo?.provider?.on) {\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else {\n          const signer = networkConnectionInfo.web3Provider.getSigner(accounts[0])\n          setNetworkConnectionInfo({\n            ...networkConnectionInfo,\n            address: accounts[0],\n            signer: signer,\n          });\n        }\n      }\n\n      // https://docs.ethers.io/v5/concepts/best-practices/#best-practices--network-changes\n      const handleChainChanged = (_hexChainId: string) => {\n        window.location.reload()\n      }\n\n      const handleDisconnect = (error: { code: number; message: string }) => {\n        disconnect()\n      }\n\n      networkConnectionInfo.provider.on('accountsChanged', handleAccountsChanged)\n      networkConnectionInfo.provider.on('chainChanged', handleChainChanged)\n      networkConnectionInfo.provider.on('disconnect', handleDisconnect)\n\n      // Subscription Cleanup\n      return () => {\n        if (networkConnectionInfo.provider.removeListener) {\n          networkConnectionInfo.provider.removeListener('accountsChanged', handleAccountsChanged)\n          networkConnectionInfo.provider.removeListener('chainChanged', handleChainChanged)\n          networkConnectionInfo.provider.removeListener('disconnect', handleDisconnect)\n        }\n      }\n    }\n  }, [networkConnectionInfo, disconnect])\n\n  const onNFTFormSubmitted = () => {\n    setTokens([...tokens, {id: BigNumber.from(inputTokenID), contractAddress: inputTokenContractAddress}])\n  }\n\n  const onItemDeleted = (itemId: number | string): void => {\n    if (typeof(itemId) === 'string') {\n      throw new Error(`itemID ${itemId} should be number`)\n    }\n    const newTokens = [...tokens];\n    newTokens.splice(itemId, 1)\n    setTokens(newTokens);\n  }\n\n  const supportedNetworks = [getNetwork('homestead'), getNetwork('rinkeby')]\n\n  const validateTokenList = (): Error | null => {\n    if (tokenListings.length === 0) {\n      return new Error(\"Must select tokens\")\n    }\n    for (const {data: asset, isLoading, isError, error} of tokenListings) {\n      if (isLoading) return new Error(\"Loading token listings...\")\n      if (isError) {\n        console.error(error)\n        return new Error(\"Failed to load tokens\")\n      }\n      if (asset === undefined) return new Error(\"Invalid data received for token listing\")\n      if (!isForSale(asset)) return new Error(\"Remove any assets not for sale\")\n    }\n    return null\n  }\n\n  const tokenListError = validateTokenList();\n\n  const shouldShowStepFour =  networkConnectionInfo !== undefined && !tokenListError\n  const shouldShowStepFive = shouldShowStepFour && safeAddress;\n  const shouldShowStepSix = shouldShowStepFive && (isSafeTransactionLoading || isSafeTransactionError || isSafeTransactionSuccess);\n\n  const getTabItems = (): Item[] => {\n    const items: Item[] = [{\n      id: '1',\n      label: '1. Introduction',\n    }, {\n      id: '2',\n      label: '2. Connect Provider'\n    }, {\n      id: '3',\n      label: '3. Select Assets',\n      disabled: !networkConnectionInfo,\n    }, {\n      id: '4',\n      label: '4. Gnosis Safe Address',\n      disabled: !shouldShowStepFour,\n    }, {\n      id: '5',\n      label: '5. Build Transaction Data',\n      disabled: !shouldShowStepFive,\n    }, {\n      id: '6',\n      label: '6. Review and Submit',\n      disabled: !shouldShowStepSix,\n    }]\n    return items;\n  }\n\n  const tabContent = (): JSX.Element => {\n    switch (selectedTabIndex) {\n      default:\n      case '1':\n        return <Step1 supportedNetworks={supportedNetworks} toNextTab={() => setSelectedTabIndex('2')}/>\n      case '2':\n        return <Step2 \n          connect={connect} \n          disconnect={disconnect} \n          networkConnectionInfo={networkConnectionInfo}\n          toNextTab={() => setSelectedTabIndex('3')}\n          supportedNetworks={supportedNetworks}\n        />\n      case '3':\n        return <Step3\n          isManageListModalOpen={isManageListModalOpen}\n          setIsManageListModalOpen={setIsManageListModalOpen}\n          tokens={tokens}\n          tokenListings={tokenListings}\n          inputTokenID={inputTokenID}\n          setInputTokenID={setInputTokenID}\n          inputTokenContractAddress={inputTokenContractAddress}\n          setInputTokenContractAddress={setInputTokenContractAddress}\n          onSubmitForm={onNFTFormSubmitted}\n          onItemDeleted={onItemDeleted}\n          toNextTab={() => setSelectedTabIndex('4')}\n          tokenListError={tokenListError}\n        />\n      case '4':\n        return <Step4 address={safeAddress!} onChangeAddress={setSafeAddress} toNextTab={() => setSelectedTabIndex('5')}/>\n      case '5':\n        return <Step5 onSubmitTransaction={() => submitTransaction()}/>\n      case '6':\n        return <Step6 \n          safeTransaction={safeTransaction} \n          isLoading={isSafeTransactionLoading} \n          isError={isSafeTransactionError} \n          isSuccess={isSafeTransactionSuccess} \n          error={safeTransactionError as Error | undefined} \n          signer={networkConnectionInfo!.signer}\n          signerAddress={networkConnectionInfo!.address}\n          network={networkConnectionInfo!.network}\n          provider={networkConnectionInfo!.provider}\n          safeAddress={safeAddress!}\n        />\n    }\n  }\n\n  return (\n    <div className='App'>\n      <Title size=\"md\">Create Batch OpenSea Purchase</Title>\n\n      <Tab \n        items={getTabItems()}\n        onChange={setSelectedTabIndex}\n        selectedTab={selectedTabIndex}\n      />\n      {tabContent()}\n    </div>\n  )\n}\n\nexport default SafeApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from '@gnosis.pm/safe-react-components'\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from 'react-query';\n\nimport GlobalStyle from './GlobalStyle'\nimport App from './App'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n        <QueryClientProvider client={queryClient}>\n          <App />\n        </QueryClientProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}